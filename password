#!/usr/bin/env python3
import base64
import pickle
import sys
from collections import defaultdict
from functools import cache
from getpass import getpass
from pathlib import Path

import fire
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives.kdf.scrypt import Scrypt

TOP = Path(__file__).parent.resolve()


@cache
def get_key() -> str:
    master_password = getpass("Enter master password: ")
    kdf = Scrypt(salt=b"", length=32, n=2**14, r=8, p=1)
    derived_key = kdf.derive(master_password.encode())
    return Fernet(base64.urlsafe_b64encode(derived_key))


def read_data() -> dict:
    key = get_key()
    data_path = (TOP / "data.pkl").resolve()
    if not data_path.is_file():
        return defaultdict(dict)
    with data_path.open("rb") as f:
        try:
            data = key.decrypt(f.read())
            data = pickle.loads(data)
        except Exception:
            print("Wrong master key")
            sys.exit(1)
    return data


def write_data(data: dict) -> None:
    key = get_key()
    data_path = (TOP / "data.pkl").resolve()
    with data_path.open("wb") as f:
        try:
            data = pickle.dumps(data)
            data = key.encrypt(data)
        except Exception:
            print("Cannot encrypt using given master key")
            sys.exit(1)
        f.write(data)
    return data


def show_data(data: dict, show_password: bool) -> None:
    for domain in sorted(data):
        print(f"========== {domain} ===========")
        for uname in sorted(data[domain]):
            print(f"\tusername: {uname}")
            if show_password:
                print(f"\t\tpassword: {data[domain][uname]}")


def show_error(condition: bool, message: str) -> None:
    if condition:
        print(message, file=sys.stderr)
        sys.exit(1)


class Secret:
    def set(self, domain: str, username: str) -> None:
        data = read_data()
        show_data(data, False)
        data[domain][username] = getpass("password: ")
        write_data(data)
        print(f"Updated or added user {username} to domain {domain}")

    def rm(self, domain: str, username: str) -> None:
        data = read_data()
        show_data(data, False)
        show_error(domain not in data, f"No such domain {domain}")
        show_error(username not in data[domain], f"No such username {username}")
        del data[domain][username]
        if len(data[domain]) == 0:
            del data[domain]
        write_data(data)
        print(f"Removed user {username} from domain {domain}")

    def show(self) -> None:
        data = read_data()
        show_data(data, True)


if __name__ == "__main__":
    fire.Fire(Secret)
